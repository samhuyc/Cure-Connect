# coding: utf-8

"""
    ClinicalTrials.gov REST API

    This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.results_section import ResultsSection

class TestResultsSection(unittest.TestCase):
    """ResultsSection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultsSection:
        """Test ResultsSection
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultsSection`
        """
        model = ResultsSection()
        if include_optional:
            return ResultsSection(
                participant_flow_module = openapi_client.models.participant_flow_module.ParticipantFlowModule(
                    pre_assignment_details = '', 
                    recruitment_details = '', 
                    type_units_analyzed = '', 
                    groups = [
                        openapi_client.models.flow_group.FlowGroup(
                            id = '', 
                            title = '', 
                            description = '', )
                        ], 
                    periods = [
                        openapi_client.models.flow_period.FlowPeriod(
                            title = '', 
                            milestones = [
                                openapi_client.models.flow_milestone.FlowMilestone(
                                    type = '', 
                                    comment = '', 
                                    achievements = [
                                        openapi_client.models.flow_stats.FlowStats(
                                            group_id = '', 
                                            comment = '', 
                                            num_subjects = '', 
                                            num_units = '', )
                                        ], )
                                ], 
                            drop_withdraws = [
                                openapi_client.models.drop_withdraw.DropWithdraw(
                                    type = '', 
                                    comment = '', 
                                    reasons = [
                                        openapi_client.models.flow_stats.FlowStats(
                                            group_id = '', 
                                            comment = '', 
                                            num_subjects = '', 
                                            num_units = '', )
                                        ], )
                                ], )
                        ], ),
                baseline_characteristics_module = openapi_client.models.baseline_characteristics_module.BaselineCharacteristicsModule(
                    population_description = '', 
                    type_units_analyzed = '', 
                    groups = [
                        openapi_client.models.measure_group.MeasureGroup(
                            id = '', 
                            title = '', 
                            description = '', )
                        ], 
                    denoms = [
                        openapi_client.models.denom.Denom(
                            units = '', 
                            counts = [
                                openapi_client.models.denom_count.DenomCount(
                                    group_id = '', 
                                    value = '', )
                                ], )
                        ], 
                    measures = [
                        openapi_client.models.baseline_measure.BaselineMeasure(
                            title = '', 
                            description = '', 
                            population_description = '', 
                            param_type = 'GEOMETRIC_MEAN', 
                            dispersion_type = 'NA', 
                            unit_of_measure = '', 
                            calculate_pct = True, 
                            denom_units_selected = '', 
                            classes = [
                                openapi_client.models.measure_class.MeasureClass(
                                    title = '', 
                                    categories = [
                                        openapi_client.models.measure_category.MeasureCategory(
                                            title = '', 
                                            measurements = [
                                                openapi_client.models.measurement.Measurement(
                                                    group_id = '', 
                                                    value = '', 
                                                    spread = '', 
                                                    lower_limit = '', 
                                                    upper_limit = '', 
                                                    comment = '', )
                                                ], )
                                        ], )
                                ], )
                        ], ),
                outcome_measures_module = openapi_client.models.outcome_measures_module.OutcomeMeasuresModule(
                    outcome_measures = [
                        openapi_client.models.outcome_measure.OutcomeMeasure(
                            type = 'PRIMARY', 
                            title = '', 
                            description = '', 
                            population_description = '', 
                            reporting_status = 'NOT_POSTED', 
                            anticipated_posting_date = '', 
                            param_type = 'GEOMETRIC_MEAN', 
                            dispersion_type = '', 
                            unit_of_measure = '', 
                            calculate_pct = True, 
                            time_frame = '', 
                            type_units_analyzed = '', 
                            denom_units_selected = '', 
                            groups = [
                                openapi_client.models.measure_group.MeasureGroup(
                                    id = '', 
                                    title = '', 
                                    description = '', )
                                ], 
                            denoms = [
                                openapi_client.models.denom.Denom(
                                    units = '', 
                                    counts = [
                                        openapi_client.models.denom_count.DenomCount(
                                            group_id = '', 
                                            value = '', )
                                        ], )
                                ], 
                            classes = [
                                openapi_client.models.measure_class.MeasureClass(
                                    title = '', 
                                    categories = [
                                        openapi_client.models.measure_category.MeasureCategory(
                                            title = '', 
                                            measurements = [
                                                openapi_client.models.measurement.Measurement(
                                                    group_id = '', 
                                                    value = '', 
                                                    spread = '', 
                                                    lower_limit = '', 
                                                    upper_limit = '', 
                                                    comment = '', )
                                                ], )
                                        ], )
                                ], 
                            analyses = [
                                openapi_client.models.measure_analysis.MeasureAnalysis(
                                    param_value = '', 
                                    dispersion_type = 'STANDARD_DEVIATION', 
                                    dispersion_value = '', 
                                    statistical_method = '', 
                                    statistical_comment = '', 
                                    p_value = '', 
                                    p_value_comment = '', 
                                    ci_num_sides = 'ONE_SIDED', 
                                    ci_pct_value = '', 
                                    ci_lower_limit = '', 
                                    ci_upper_limit = '', 
                                    ci_lower_limit_comment = '', 
                                    ci_upper_limit_comment = '', 
                                    estimate_comment = '', 
                                    tested_non_inferiority = True, 
                                    non_inferiority_type = 'SUPERIORITY', 
                                    non_inferiority_comment = '', 
                                    other_analysis_description = '', 
                                    group_description = '', 
                                    group_ids = [
                                        ''
                                        ], )
                                ], )
                        ], ),
                adverse_events_module = openapi_client.models.adverse_events_module.AdverseEventsModule(
                    frequency_threshold = '', 
                    time_frame = '', 
                    description = '', 
                    all_cause_mortality_comment = '', 
                    event_groups = [
                        openapi_client.models.event_group.EventGroup(
                            id = '', 
                            title = '', 
                            description = '', 
                            deaths_num_affected = 56, 
                            deaths_num_at_risk = 56, 
                            serious_num_affected = 56, 
                            serious_num_at_risk = 56, 
                            other_num_affected = 56, 
                            other_num_at_risk = 56, )
                        ], 
                    serious_events = [
                        openapi_client.models.adverse_event.AdverseEvent(
                            term = '', 
                            organ_system = '', 
                            source_vocabulary = '', 
                            assessment_type = 'NON_SYSTEMATIC_ASSESSMENT', 
                            notes = '', 
                            stats = [
                                openapi_client.models.event_stats.EventStats(
                                    group_id = '', 
                                    num_events = 56, 
                                    num_affected = 56, 
                                    num_at_risk = 56, )
                                ], )
                        ], 
                    other_events = [
                        openapi_client.models.adverse_event.AdverseEvent(
                            term = '', 
                            organ_system = '', 
                            source_vocabulary = '', 
                            notes = '', )
                        ], ),
                more_info_module = openapi_client.models.more_info_module.MoreInfoModule(
                    limitations_and_caveats = openapi_client.models.limitations_and_caveats.LimitationsAndCaveats(
                        description = '', ), 
                    certain_agreement = openapi_client.models.certain_agreement.CertainAgreement(
                        pi_sponsor_employee = True, 
                        restriction_type = 'LTE60', 
                        restrictive_agreement = True, 
                        other_details = '', ), 
                    point_of_contact = openapi_client.models.point_of_contact.PointOfContact(
                        title = '', 
                        organization = '', 
                        email = '', 
                        phone = '', 
                        phone_ext = '', ), )
            )
        else:
            return ResultsSection(
        )
        """

    def testResultsSection(self):
        """Test ResultsSection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
