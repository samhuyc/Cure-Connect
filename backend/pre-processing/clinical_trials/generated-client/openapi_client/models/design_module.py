# coding: utf-8

"""
    ClinicalTrials.gov REST API

    This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.bio_spec import BioSpec
from openapi_client.models.design_info import DesignInfo
from openapi_client.models.enrollment_info import EnrollmentInfo
from openapi_client.models.expanded_access_types import ExpandedAccessTypes
from openapi_client.models.phase import Phase
from openapi_client.models.study_type import StudyType
from typing import Optional, Set
from typing_extensions import Self

class DesignModule(BaseModel):
    """
    DesignModule
    """ # noqa: E501
    study_type: Optional[StudyType] = Field(default=None, alias="studyType")
    n_ptrs_to_this_exp_acc_nct_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="nPtrsToThisExpAccNctId")
    expanded_access_types: Optional[ExpandedAccessTypes] = Field(default=None, alias="expandedAccessTypes")
    patient_registry: Optional[StrictBool] = Field(default=None, alias="patientRegistry")
    target_duration: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="targetDuration")
    phases: Optional[List[Phase]] = None
    design_info: Optional[DesignInfo] = Field(default=None, alias="designInfo")
    bio_spec: Optional[BioSpec] = Field(default=None, alias="bioSpec")
    enrollment_info: Optional[EnrollmentInfo] = Field(default=None, alias="enrollmentInfo")
    __properties: ClassVar[List[str]] = ["studyType", "nPtrsToThisExpAccNctId", "expandedAccessTypes", "patientRegistry", "targetDuration", "phases", "designInfo", "bioSpec", "enrollmentInfo"]

    @field_validator('target_duration')
    def target_duration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$", value):
            raise ValueError(r"must validate the regular expression /^\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DesignModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of expanded_access_types
        if self.expanded_access_types:
            _dict['expandedAccessTypes'] = self.expanded_access_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of design_info
        if self.design_info:
            _dict['designInfo'] = self.design_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bio_spec
        if self.bio_spec:
            _dict['bioSpec'] = self.bio_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enrollment_info
        if self.enrollment_info:
            _dict['enrollmentInfo'] = self.enrollment_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DesignModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "studyType": obj.get("studyType"),
            "nPtrsToThisExpAccNctId": obj.get("nPtrsToThisExpAccNctId"),
            "expandedAccessTypes": ExpandedAccessTypes.from_dict(obj["expandedAccessTypes"]) if obj.get("expandedAccessTypes") is not None else None,
            "patientRegistry": obj.get("patientRegistry"),
            "targetDuration": obj.get("targetDuration"),
            "phases": obj.get("phases"),
            "designInfo": DesignInfo.from_dict(obj["designInfo"]) if obj.get("designInfo") is not None else None,
            "bioSpec": BioSpec.from_dict(obj["bioSpec"]) if obj.get("bioSpec") is not None else None,
            "enrollmentInfo": EnrollmentInfo.from_dict(obj["enrollmentInfo"]) if obj.get("enrollmentInfo") is not None else None
        })
        return _obj


