# coding: utf-8

"""
    ClinicalTrials.gov REST API

    This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.web_link import WebLink
from typing import Optional, Set
from typing_extensions import Self

class FieldNode(BaseModel):
    """
    FieldNode
    """ # noqa: E501
    alt_piece_names: Optional[List[StrictStr]] = Field(default=None, alias="altPieceNames")
    children: Optional[List[FieldNode]] = None
    ded_link: Optional[WebLink] = Field(default=None, alias="dedLink")
    description: Optional[StrictStr] = None
    historic_only: Optional[StrictBool] = Field(default=None, alias="historicOnly")
    indexed_only: Optional[StrictBool] = Field(default=None, alias="indexedOnly")
    is_enum: Optional[StrictBool] = Field(default=None, alias="isEnum")
    max_chars: Optional[StrictInt] = Field(default=None, alias="maxChars")
    name: StrictStr
    nested: Optional[StrictBool] = None
    piece: StrictStr
    rules: Optional[StrictStr] = None
    source_type: StrictStr = Field(alias="sourceType")
    synonyms: Optional[StrictBool] = None
    title: Optional[StrictStr] = None
    type: StrictStr
    __properties: ClassVar[List[str]] = ["altPieceNames", "children", "dedLink", "description", "historicOnly", "indexedOnly", "isEnum", "maxChars", "name", "nested", "piece", "rules", "sourceType", "synonyms", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of ded_link
        if self.ded_link:
            _dict['dedLink'] = self.ded_link.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "altPieceNames": obj.get("altPieceNames"),
            "children": [FieldNode.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "dedLink": WebLink.from_dict(obj["dedLink"]) if obj.get("dedLink") is not None else None,
            "description": obj.get("description"),
            "historicOnly": obj.get("historicOnly"),
            "indexedOnly": obj.get("indexedOnly"),
            "isEnum": obj.get("isEnum"),
            "maxChars": obj.get("maxChars"),
            "name": obj.get("name"),
            "nested": obj.get("nested"),
            "piece": obj.get("piece"),
            "rules": obj.get("rules"),
            "sourceType": obj.get("sourceType"),
            "synonyms": obj.get("synonyms"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
FieldNode.model_rebuild(raise_errors=False)

