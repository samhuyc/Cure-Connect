# coding: utf-8

"""
    ClinicalTrials.gov REST API

    This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.boolean_stats import BooleanStats
from openapi_client.models.date_stats import DateStats
from openapi_client.models.enum_stats import EnumStats
from openapi_client.models.integer_stats import IntegerStats
from openapi_client.models.number_stats import NumberStats
from openapi_client.models.string_stats import StringStats
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

FIELDVALUESSTATS_ANY_OF_SCHEMAS = ["BooleanStats", "DateStats", "EnumStats", "IntegerStats", "NumberStats", "StringStats"]

class FieldValuesStats(BaseModel):
    """
    FieldValuesStats
    """

    # data type: EnumStats
    anyof_schema_1_validator: Optional[EnumStats] = None
    # data type: StringStats
    anyof_schema_2_validator: Optional[StringStats] = None
    # data type: DateStats
    anyof_schema_3_validator: Optional[DateStats] = None
    # data type: IntegerStats
    anyof_schema_4_validator: Optional[IntegerStats] = None
    # data type: NumberStats
    anyof_schema_5_validator: Optional[NumberStats] = None
    # data type: BooleanStats
    anyof_schema_6_validator: Optional[BooleanStats] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[BooleanStats, DateStats, EnumStats, IntegerStats, NumberStats, StringStats]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "BooleanStats", "DateStats", "EnumStats", "IntegerStats", "NumberStats", "StringStats" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = FieldValuesStats.model_construct()
        error_messages = []
        # validate data type: EnumStats
        if not isinstance(v, EnumStats):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EnumStats`")
        else:
            return v

        # validate data type: StringStats
        if not isinstance(v, StringStats):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StringStats`")
        else:
            return v

        # validate data type: DateStats
        if not isinstance(v, DateStats):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DateStats`")
        else:
            return v

        # validate data type: IntegerStats
        if not isinstance(v, IntegerStats):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IntegerStats`")
        else:
            return v

        # validate data type: NumberStats
        if not isinstance(v, NumberStats):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberStats`")
        else:
            return v

        # validate data type: BooleanStats
        if not isinstance(v, BooleanStats):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BooleanStats`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in FieldValuesStats with anyOf schemas: BooleanStats, DateStats, EnumStats, IntegerStats, NumberStats, StringStats. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[EnumStats] = None
        try:
            instance.actual_instance = EnumStats.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[StringStats] = None
        try:
            instance.actual_instance = StringStats.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[DateStats] = None
        try:
            instance.actual_instance = DateStats.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[IntegerStats] = None
        try:
            instance.actual_instance = IntegerStats.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[NumberStats] = None
        try:
            instance.actual_instance = NumberStats.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[BooleanStats] = None
        try:
            instance.actual_instance = BooleanStats.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into FieldValuesStats with anyOf schemas: BooleanStats, DateStats, EnumStats, IntegerStats, NumberStats, StringStats. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BooleanStats, DateStats, EnumStats, IntegerStats, NumberStats, StringStats]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


