# coding: utf-8

"""
    ClinicalTrials.gov REST API

    This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.arms_interventions_module import ArmsInterventionsModule
from openapi_client.models.conditions_module import ConditionsModule
from openapi_client.models.contacts_locations_module import ContactsLocationsModule
from openapi_client.models.description_module import DescriptionModule
from openapi_client.models.design_module import DesignModule
from openapi_client.models.eligibility_module import EligibilityModule
from openapi_client.models.identification_module import IdentificationModule
from openapi_client.models.ipd_sharing_statement_module import IpdSharingStatementModule
from openapi_client.models.outcomes_module import OutcomesModule
from openapi_client.models.oversight_module import OversightModule
from openapi_client.models.references_module import ReferencesModule
from openapi_client.models.sponsor_collaborators_module import SponsorCollaboratorsModule
from openapi_client.models.status_module import StatusModule
from typing import Optional, Set
from typing_extensions import Self

class ProtocolSection(BaseModel):
    """
    ProtocolSection
    """ # noqa: E501
    identification_module: Optional[IdentificationModule] = Field(default=None, alias="identificationModule")
    status_module: Optional[StatusModule] = Field(default=None, alias="statusModule")
    sponsor_collaborators_module: Optional[SponsorCollaboratorsModule] = Field(default=None, alias="sponsorCollaboratorsModule")
    oversight_module: Optional[OversightModule] = Field(default=None, alias="oversightModule")
    description_module: Optional[DescriptionModule] = Field(default=None, alias="descriptionModule")
    conditions_module: Optional[ConditionsModule] = Field(default=None, alias="conditionsModule")
    design_module: Optional[DesignModule] = Field(default=None, alias="designModule")
    arms_interventions_module: Optional[ArmsInterventionsModule] = Field(default=None, alias="armsInterventionsModule")
    outcomes_module: Optional[OutcomesModule] = Field(default=None, alias="outcomesModule")
    eligibility_module: Optional[EligibilityModule] = Field(default=None, alias="eligibilityModule")
    contacts_locations_module: Optional[ContactsLocationsModule] = Field(default=None, alias="contactsLocationsModule")
    references_module: Optional[ReferencesModule] = Field(default=None, alias="referencesModule")
    ipd_sharing_statement_module: Optional[IpdSharingStatementModule] = Field(default=None, alias="ipdSharingStatementModule")
    __properties: ClassVar[List[str]] = ["identificationModule", "statusModule", "sponsorCollaboratorsModule", "oversightModule", "descriptionModule", "conditionsModule", "designModule", "armsInterventionsModule", "outcomesModule", "eligibilityModule", "contactsLocationsModule", "referencesModule", "ipdSharingStatementModule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtocolSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identification_module
        if self.identification_module:
            _dict['identificationModule'] = self.identification_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_module
        if self.status_module:
            _dict['statusModule'] = self.status_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sponsor_collaborators_module
        if self.sponsor_collaborators_module:
            _dict['sponsorCollaboratorsModule'] = self.sponsor_collaborators_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oversight_module
        if self.oversight_module:
            _dict['oversightModule'] = self.oversight_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description_module
        if self.description_module:
            _dict['descriptionModule'] = self.description_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions_module
        if self.conditions_module:
            _dict['conditionsModule'] = self.conditions_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of design_module
        if self.design_module:
            _dict['designModule'] = self.design_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of arms_interventions_module
        if self.arms_interventions_module:
            _dict['armsInterventionsModule'] = self.arms_interventions_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outcomes_module
        if self.outcomes_module:
            _dict['outcomesModule'] = self.outcomes_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eligibility_module
        if self.eligibility_module:
            _dict['eligibilityModule'] = self.eligibility_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contacts_locations_module
        if self.contacts_locations_module:
            _dict['contactsLocationsModule'] = self.contacts_locations_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of references_module
        if self.references_module:
            _dict['referencesModule'] = self.references_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ipd_sharing_statement_module
        if self.ipd_sharing_statement_module:
            _dict['ipdSharingStatementModule'] = self.ipd_sharing_statement_module.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtocolSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "identificationModule": IdentificationModule.from_dict(obj["identificationModule"]) if obj.get("identificationModule") is not None else None,
            "statusModule": StatusModule.from_dict(obj["statusModule"]) if obj.get("statusModule") is not None else None,
            "sponsorCollaboratorsModule": SponsorCollaboratorsModule.from_dict(obj["sponsorCollaboratorsModule"]) if obj.get("sponsorCollaboratorsModule") is not None else None,
            "oversightModule": OversightModule.from_dict(obj["oversightModule"]) if obj.get("oversightModule") is not None else None,
            "descriptionModule": DescriptionModule.from_dict(obj["descriptionModule"]) if obj.get("descriptionModule") is not None else None,
            "conditionsModule": ConditionsModule.from_dict(obj["conditionsModule"]) if obj.get("conditionsModule") is not None else None,
            "designModule": DesignModule.from_dict(obj["designModule"]) if obj.get("designModule") is not None else None,
            "armsInterventionsModule": ArmsInterventionsModule.from_dict(obj["armsInterventionsModule"]) if obj.get("armsInterventionsModule") is not None else None,
            "outcomesModule": OutcomesModule.from_dict(obj["outcomesModule"]) if obj.get("outcomesModule") is not None else None,
            "eligibilityModule": EligibilityModule.from_dict(obj["eligibilityModule"]) if obj.get("eligibilityModule") is not None else None,
            "contactsLocationsModule": ContactsLocationsModule.from_dict(obj["contactsLocationsModule"]) if obj.get("contactsLocationsModule") is not None else None,
            "referencesModule": ReferencesModule.from_dict(obj["referencesModule"]) if obj.get("referencesModule") is not None else None,
            "ipdSharingStatementModule": IpdSharingStatementModule.from_dict(obj["ipdSharingStatementModule"]) if obj.get("ipdSharingStatementModule") is not None else None
        })
        return _obj


