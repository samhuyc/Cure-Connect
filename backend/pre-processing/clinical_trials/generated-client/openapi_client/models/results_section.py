# coding: utf-8

"""
    ClinicalTrials.gov REST API

    This API is made available to provide users meta data, statistics, and the most recent version of the clinical trials available on ClinicalTrials.gov.

    The version of the OpenAPI document: 2.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.adverse_events_module import AdverseEventsModule
from openapi_client.models.baseline_characteristics_module import BaselineCharacteristicsModule
from openapi_client.models.more_info_module import MoreInfoModule
from openapi_client.models.outcome_measures_module import OutcomeMeasuresModule
from openapi_client.models.participant_flow_module import ParticipantFlowModule
from typing import Optional, Set
from typing_extensions import Self

class ResultsSection(BaseModel):
    """
    ResultsSection
    """ # noqa: E501
    participant_flow_module: Optional[ParticipantFlowModule] = Field(default=None, alias="participantFlowModule")
    baseline_characteristics_module: Optional[BaselineCharacteristicsModule] = Field(default=None, alias="baselineCharacteristicsModule")
    outcome_measures_module: Optional[OutcomeMeasuresModule] = Field(default=None, alias="outcomeMeasuresModule")
    adverse_events_module: Optional[AdverseEventsModule] = Field(default=None, alias="adverseEventsModule")
    more_info_module: Optional[MoreInfoModule] = Field(default=None, alias="moreInfoModule")
    __properties: ClassVar[List[str]] = ["participantFlowModule", "baselineCharacteristicsModule", "outcomeMeasuresModule", "adverseEventsModule", "moreInfoModule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResultsSection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of participant_flow_module
        if self.participant_flow_module:
            _dict['participantFlowModule'] = self.participant_flow_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of baseline_characteristics_module
        if self.baseline_characteristics_module:
            _dict['baselineCharacteristicsModule'] = self.baseline_characteristics_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outcome_measures_module
        if self.outcome_measures_module:
            _dict['outcomeMeasuresModule'] = self.outcome_measures_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of adverse_events_module
        if self.adverse_events_module:
            _dict['adverseEventsModule'] = self.adverse_events_module.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_info_module
        if self.more_info_module:
            _dict['moreInfoModule'] = self.more_info_module.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResultsSection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "participantFlowModule": ParticipantFlowModule.from_dict(obj["participantFlowModule"]) if obj.get("participantFlowModule") is not None else None,
            "baselineCharacteristicsModule": BaselineCharacteristicsModule.from_dict(obj["baselineCharacteristicsModule"]) if obj.get("baselineCharacteristicsModule") is not None else None,
            "outcomeMeasuresModule": OutcomeMeasuresModule.from_dict(obj["outcomeMeasuresModule"]) if obj.get("outcomeMeasuresModule") is not None else None,
            "adverseEventsModule": AdverseEventsModule.from_dict(obj["adverseEventsModule"]) if obj.get("adverseEventsModule") is not None else None,
            "moreInfoModule": MoreInfoModule.from_dict(obj["moreInfoModule"]) if obj.get("moreInfoModule") is not None else None
        })
        return _obj


